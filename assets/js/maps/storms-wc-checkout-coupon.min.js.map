{"version":3,"sources":["storms-wc-checkout-coupon.min.js"],"names":["jQuery","$","storms_wc_checkout_coupon_vars","block","$node","is","parents","length","addClass","message","overlayCSS","background","opacity","unblock","removeClass","show_notice","html_element","$target","closest","prepend","update_wc_div","html_str","preserve_notices","$html","parseHTML","$new_form","$new_totals","$notices","remove","window","location","reload","$cart_html","replaceWith","document","body","trigger","find","prop","is_cart","hasClass","is_checkout","on","event","preventDefault","$wrapper","this","currentTarget","$text_field","coupon_code","val","data","security","apply_coupon_nonce","ajax","url","wc_ajax_url","toString","replace","type","dataType","success","response","$form","update_shipping_method","attr","serialize","complete","scroll_to_notices","error","jqXHR","debug_mode","console","log","responseText"],"mappings":"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","file":"../storms-wc-checkout-coupon.min.js","sourcesContent":["\"use strict\";\n\n/**\r\n *\r\n */\n\n/* global storms_wc_checkout_coupon_vars */\njQuery(function ($) {\n  // storms_wc_checkout_coupon_vars is required to continue, ensure the object exists\n  if (typeof storms_wc_checkout_coupon_vars === 'undefined') {\n    return false;\n  }\n\n  var is_cart = $(document.body).hasClass('woocommerce-cart');\n  var is_checkout = $(document.body).hasClass('woocommerce-checkout'); // Probably, will get trouble when using caching for assets... above approach is better\n  //var is_cart = ( 'yes' === storms_wc_checkout_coupon_vars.is_cart );\n  //var is_checkout = ( 'yes' === storms_wc_checkout_coupon_vars.is_checkout );\n\n  /**\r\n   * Check if a node is blocked for processing.\r\n   *\r\n   * @param {JQuery Object} $node\r\n   * @return {bool} True if the DOM Element is UI Blocked, false if not.\r\n   */\n\n  var is_blocked = function is_blocked($node) {\n    return $node.is('.processing') || $node.parents('.processing').length;\n  };\n  /**\r\n   * Block a node visually for processing.\r\n   *\r\n   * @param {JQuery Object} $node\r\n   */\n\n\n  var block = function block($node) {\n    if (!is_blocked($node)) {\n      $node.addClass('processing').block({\n        message: null,\n        overlayCSS: {\n          background: '#fff',\n          opacity: 0.6\n        }\n      });\n    }\n  };\n  /**\r\n   * Unblock a node after processing is complete.\r\n   *\r\n   * @param {JQuery Object} $node\r\n   */\n\n\n  var unblock = function unblock($node) {\n    $node.removeClass('processing').unblock();\n  };\n  /**\r\n   * Shows new notices on the page.\r\n   *\r\n   * @param {Object} The Notice HTML Element in string or object form.\r\n   */\n\n\n  var show_notice = function show_notice(html_element, $target) {\n    if (!$target) {\n      $target = $('.woocommerce-notices-wrapper:first') || $('.cart-empty').closest('.woocommerce') || $('.woocommerce-cart-form');\n    }\n\n    $target.prepend(html_element);\n  };\n  /**\r\n   * Update the .cart_totals div with a string of html.\r\n   *\r\n   * @param {String} html_str The HTML string with which to replace the div.\r\n   */\n\n\n  var update_cart_totals_div = function update_cart_totals_div(html_str) {\n    $('.cart_totals').replaceWith(html_str);\n    $(document.body).trigger('updated_cart_totals');\n  };\n  /**\r\n   * Update the .woocommerce div with a string of html.\r\n   *\r\n   * @param {String} html_str The HTML string with which to replace the div.\r\n   * @param {bool} preserve_notices Should notices be kept? False by default.\r\n   */\n\n\n  var update_wc_div = function update_wc_div(html_str, preserve_notices) {\n    var $html = $.parseHTML(html_str);\n    var $new_form = $('.woocommerce-cart-form', $html);\n    var $new_totals = $('.cart_totals', $html);\n    var $notices = $('.woocommerce-error, .woocommerce-message, .woocommerce-info', $html); // No form, cannot do this.\n\n    if ($('.woocommerce-cart-form').length === 0) {\n      window.location.reload();\n      return;\n    } // Remove errors\n\n\n    if (!preserve_notices) {\n      $('.woocommerce-error, .woocommerce-message, .woocommerce-info').remove();\n    }\n\n    if ($new_form.length === 0) {\n      // If the checkout is also displayed on this page, trigger reload instead.\n      if ($('.woocommerce-checkout').length) {\n        window.location.reload();\n        return;\n      } // No items to display now! Replace all cart content.\n\n\n      var $cart_html = $('.cart-empty', $html).closest('.woocommerce');\n      $('.woocommerce-cart-form__contents').closest('.woocommerce').replaceWith($cart_html); // Display errors\n\n      if ($notices.length > 0) {\n        show_notice($notices);\n      } // Notify plugins that the cart was emptied.\n\n\n      $(document.body).trigger('wc_cart_emptied');\n    } else {\n      // If the checkout is also displayed on this page, trigger update event.\n      if ($('.woocommerce-checkout').length) {\n        $(document.body).trigger('update_checkout');\n      }\n\n      $('.woocommerce-cart-form').replaceWith($new_form);\n      $('.woocommerce-cart-form').find(':input[name=\"update_cart\"]').prop('disabled', true);\n\n      if ($notices.length > 0) {\n        show_notice($notices);\n      }\n\n      update_cart_totals_div($new_totals);\n    }\n\n    $(document.body).trigger('updated_wc_div');\n  };\n\n  var update_cart = function update_cart(preserve_notices) {\n    var $form = $('.woocommerce-cart-form');\n    block($form);\n    block($('div.cart_totals')); // Make call to actual form post URL.\n\n    $.ajax({\n      type: $form.attr('method'),\n      url: $form.attr('action'),\n      data: $form.serialize(),\n      dataType: 'html',\n      success: function success(response) {\n        update_wc_div(response, preserve_notices);\n      },\n      complete: function complete() {\n        unblock($form);\n        unblock($('div.cart_totals'));\n        $.scroll_to_notices($('[role=\"alert\"]'));\n      }\n    });\n  };\n  /**\r\n   * CHECKOUT PAGE : button[name='apply_coupon']\r\n   * CART PAGE : input[name='apply_coupon']\r\n   */\n\n\n  $(document.body).on('click', \"button[name='apply_coupon'], input[name='apply_coupon']\", function (event) {\n    event.preventDefault();\n\n    if (!is_cart && !is_checkout) {\n      return;\n    }\n\n    var $wrapper = '';\n\n    if (is_checkout) {\n      $wrapper = $(this).parents('.woocommerce-checkout-review-order');\n    } else {\n      $wrapper = $(event.currentTarget).closest('.cart_totals');\n    }\n\n    var $text_field = $('#coupon_code');\n    var coupon_code = $text_field.val();\n    var data = {\n      security: storms_wc_checkout_coupon_vars.apply_coupon_nonce,\n      coupon_code: coupon_code\n    };\n    block($wrapper);\n    $.ajax({\n      url: storms_wc_checkout_coupon_vars.wc_ajax_url.toString().replace('%%endpoint%%', 'apply_coupon'),\n      type: 'POST',\n      data: data,\n      dataType: 'html',\n      success: function success(response) {\n        $('.woocommerce-error, .woocommerce-message, .woocommerce-info').remove();\n        unblock($wrapper);\n        show_notice(response);\n\n        if (is_checkout) {\n          $(document.body).trigger('update_checkout', {\n            update_shipping_method: false\n          });\n        } else {\n          update_cart(true);\n        }\n      },\n      complete: function complete() {\n        unblock($wrapper);\n        $text_field.val('');\n      },\n      error: function error(jqXHR) {\n        if (storms_wc_checkout_coupon_vars.debug_mode) {\n          /* jshint devel: true */\n          console.log(jqXHR.responseText);\n        }\n      }\n    });\n  });\n});"]}